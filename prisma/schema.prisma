// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  enrollment   Enrollment[]
  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Course {
  id String @id @default(uuid())

  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            courseLevel @default(Beginner)
  category         String
  smallDescription String
  slug             String      @unique
  stripePriceId    String @unique

  status courseStatus @default(Draft)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapter Chapter[]
  enrollment Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum courseLevel {
  Beginner
  Intermediate
  Advanced
}

enum courseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())
  title String
  position Int

  Course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(uuid())
  title String
  description String?
  thumbnailKey String?
  videoKey String?
  position Int

  Chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  LessonProgress LessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id String @id @default(uuid())
  amount Int
  status enrollmentStatus @default(Pending)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum enrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id String @id @default(uuid())
  completed Boolean @default(false)

  lessonId String
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, lessonId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

